//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  page: Page;
  pageConnection: PageConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
};

export type DocumentFilter = {
  page?: InputMaybe<PageFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Page;

export type PageReasons = {
  __typename?: 'PageReasons';
  reasonTitle?: Maybe<Scalars['String']>;
  reasonText?: Maybe<Scalars['String']>;
};

export type PageResolutions = {
  __typename?: 'PageResolutions';
  resolutionTitle?: Maybe<Scalars['String']>;
  resolutionText?: Maybe<Scalars['JSON']>;
};

export type PageProcessSteps = {
  __typename?: 'PageProcessSteps';
  processStepText?: Maybe<Scalars['String']>;
};

export type PageReviews = {
  __typename?: 'PageReviews';
  reviewName?: Maybe<Scalars['String']>;
  reviewText?: Maybe<Scalars['JSON']>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  reasonsTitle?: Maybe<Scalars['String']>;
  reasons?: Maybe<Array<Maybe<PageReasons>>>;
  methodTitle?: Maybe<Scalars['String']>;
  methodText?: Maybe<Scalars['JSON']>;
  resolutionTitle?: Maybe<Scalars['String']>;
  resolutions?: Maybe<Array<Maybe<PageResolutions>>>;
  processTitle?: Maybe<Scalars['String']>;
  processSteps?: Maybe<Array<Maybe<PageProcessSteps>>>;
  aboutTitle?: Maybe<Scalars['String']>;
  aboutText?: Maybe<Scalars['JSON']>;
  reviewsTitle?: Maybe<Scalars['String']>;
  reviews?: Maybe<Array<Maybe<PageReviews>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type PageReasonsFilter = {
  reasonTitle?: InputMaybe<StringFilter>;
  reasonText?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type PageResolutionsFilter = {
  resolutionTitle?: InputMaybe<StringFilter>;
  resolutionText?: InputMaybe<RichTextFilter>;
};

export type PageProcessStepsFilter = {
  processStepText?: InputMaybe<StringFilter>;
};

export type PageReviewsFilter = {
  reviewName?: InputMaybe<StringFilter>;
  reviewText?: InputMaybe<RichTextFilter>;
};

export type PageFilter = {
  reasonsTitle?: InputMaybe<StringFilter>;
  reasons?: InputMaybe<PageReasonsFilter>;
  methodTitle?: InputMaybe<StringFilter>;
  methodText?: InputMaybe<RichTextFilter>;
  resolutionTitle?: InputMaybe<StringFilter>;
  resolutions?: InputMaybe<PageResolutionsFilter>;
  processTitle?: InputMaybe<StringFilter>;
  processSteps?: InputMaybe<PageProcessStepsFilter>;
  aboutTitle?: InputMaybe<StringFilter>;
  aboutText?: InputMaybe<RichTextFilter>;
  reviewsTitle?: InputMaybe<StringFilter>;
  reviews?: InputMaybe<PageReviewsFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updatePage: Page;
  createPage: Page;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String'];
  params: PageMutation;
};

export type DocumentMutation = {
  page?: InputMaybe<PageMutation>;
};

export type PageReasonsMutation = {
  reasonTitle?: InputMaybe<Scalars['String']>;
  reasonText?: InputMaybe<Scalars['String']>;
};

export type PageResolutionsMutation = {
  resolutionTitle?: InputMaybe<Scalars['String']>;
  resolutionText?: InputMaybe<Scalars['JSON']>;
};

export type PageProcessStepsMutation = {
  processStepText?: InputMaybe<Scalars['String']>;
};

export type PageReviewsMutation = {
  reviewName?: InputMaybe<Scalars['String']>;
  reviewText?: InputMaybe<Scalars['JSON']>;
};

export type PageMutation = {
  reasonsTitle?: InputMaybe<Scalars['String']>;
  reasons?: InputMaybe<Array<InputMaybe<PageReasonsMutation>>>;
  methodTitle?: InputMaybe<Scalars['String']>;
  methodText?: InputMaybe<Scalars['JSON']>;
  resolutionTitle?: InputMaybe<Scalars['String']>;
  resolutions?: InputMaybe<Array<InputMaybe<PageResolutionsMutation>>>;
  processTitle?: InputMaybe<Scalars['String']>;
  processSteps?: InputMaybe<Array<InputMaybe<PageProcessStepsMutation>>>;
  aboutTitle?: InputMaybe<Scalars['String']>;
  aboutText?: InputMaybe<Scalars['JSON']>;
  reviewsTitle?: InputMaybe<Scalars['String']>;
  reviews?: InputMaybe<Array<InputMaybe<PageReviewsMutation>>>;
};

export type PagePartsFragment = { __typename?: 'Page', reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, reviewsTitle?: string | null | undefined, reasons?: Array<{ __typename: 'PageReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'PageResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'PageProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'PageReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename?: 'Page', id: string, reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, reviewsTitle?: string | null | undefined, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, reasons?: Array<{ __typename: 'PageReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'PageResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'PageProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'PageReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, edges?: Array<{ __typename?: 'PageConnectionEdges', node?: { __typename?: 'Page', id: string, reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, reviewsTitle?: string | null | undefined, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, reasons?: Array<{ __typename: 'PageReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'PageResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'PageProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'PageReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined } | null | undefined } | null | undefined> | null | undefined } };

export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  reasonsTitle
  reasons {
    __typename
    reasonTitle
    reasonText
  }
  methodTitle
  methodText
  resolutionTitle
  resolutions {
    __typename
    resolutionTitle
    resolutionText
  }
  processTitle
  processSteps {
    __typename
    processStepText
  }
  aboutTitle
  aboutText
  reviewsTitle
  reviews {
    __typename
    reviewName
    reviewText
  }
}
    `;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  