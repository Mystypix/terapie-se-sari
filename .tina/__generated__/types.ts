//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  czech: Czech;
  czechConnection: CzechConnection;
  english: English;
  englishConnection: EnglishConnection;
  images: Images;
  imagesConnection: ImagesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryCzechArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryCzechConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<CzechFilter>;
};


export type QueryEnglishArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryEnglishConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<EnglishFilter>;
};


export type QueryImagesArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryImagesConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ImagesFilter>;
};

export type DocumentFilter = {
  czech?: InputMaybe<CzechFilter>;
  english?: InputMaybe<EnglishFilter>;
  images?: InputMaybe<ImagesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Czech | English | Images;

export type CzechReasons = {
  __typename?: 'CzechReasons';
  reasonTitle?: Maybe<Scalars['String']>;
  reasonText?: Maybe<Scalars['String']>;
};

export type CzechResolutions = {
  __typename?: 'CzechResolutions';
  resolutionTitle?: Maybe<Scalars['String']>;
  resolutionText?: Maybe<Scalars['JSON']>;
};

export type CzechProcessSteps = {
  __typename?: 'CzechProcessSteps';
  processStepText?: Maybe<Scalars['String']>;
};

export type CzechReviews = {
  __typename?: 'CzechReviews';
  reviewName?: Maybe<Scalars['String']>;
  reviewText?: Maybe<Scalars['JSON']>;
};

export type CzechFaq = {
  __typename?: 'CzechFaq';
  faqTitle?: Maybe<Scalars['String']>;
  faqText?: Maybe<Scalars['JSON']>;
};

export type Czech = Node & Document & {
  __typename?: 'Czech';
  reasonsTitle?: Maybe<Scalars['String']>;
  reasons?: Maybe<Array<Maybe<CzechReasons>>>;
  methodTitle?: Maybe<Scalars['String']>;
  methodText?: Maybe<Scalars['JSON']>;
  resolutionTitle?: Maybe<Scalars['String']>;
  resolutions?: Maybe<Array<Maybe<CzechResolutions>>>;
  processTitle?: Maybe<Scalars['String']>;
  processSteps?: Maybe<Array<Maybe<CzechProcessSteps>>>;
  aboutTitle?: Maybe<Scalars['String']>;
  aboutText?: Maybe<Scalars['JSON']>;
  placeLookTitle?: Maybe<Scalars['String']>;
  reviewsTitle?: Maybe<Scalars['String']>;
  reviews?: Maybe<Array<Maybe<CzechReviews>>>;
  faqTitle?: Maybe<Scalars['String']>;
  faq?: Maybe<Array<Maybe<CzechFaq>>>;
  videosTitle?: Maybe<Scalars['String']>;
  contactTitle?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CzechReasonsFilter = {
  reasonTitle?: InputMaybe<StringFilter>;
  reasonText?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type CzechResolutionsFilter = {
  resolutionTitle?: InputMaybe<StringFilter>;
  resolutionText?: InputMaybe<RichTextFilter>;
};

export type CzechProcessStepsFilter = {
  processStepText?: InputMaybe<StringFilter>;
};

export type CzechReviewsFilter = {
  reviewName?: InputMaybe<StringFilter>;
  reviewText?: InputMaybe<RichTextFilter>;
};

export type CzechFaqFilter = {
  faqTitle?: InputMaybe<StringFilter>;
  faqText?: InputMaybe<RichTextFilter>;
};

export type CzechFilter = {
  reasonsTitle?: InputMaybe<StringFilter>;
  reasons?: InputMaybe<CzechReasonsFilter>;
  methodTitle?: InputMaybe<StringFilter>;
  methodText?: InputMaybe<RichTextFilter>;
  resolutionTitle?: InputMaybe<StringFilter>;
  resolutions?: InputMaybe<CzechResolutionsFilter>;
  processTitle?: InputMaybe<StringFilter>;
  processSteps?: InputMaybe<CzechProcessStepsFilter>;
  aboutTitle?: InputMaybe<StringFilter>;
  aboutText?: InputMaybe<RichTextFilter>;
  placeLookTitle?: InputMaybe<StringFilter>;
  reviewsTitle?: InputMaybe<StringFilter>;
  reviews?: InputMaybe<CzechReviewsFilter>;
  faqTitle?: InputMaybe<StringFilter>;
  faq?: InputMaybe<CzechFaqFilter>;
  videosTitle?: InputMaybe<StringFilter>;
  contactTitle?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  price?: InputMaybe<StringFilter>;
};

export type CzechConnectionEdges = {
  __typename?: 'CzechConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Czech>;
};

export type CzechConnection = Connection & {
  __typename?: 'CzechConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<CzechConnectionEdges>>>;
};

export type EnglishReasons = {
  __typename?: 'EnglishReasons';
  reasonTitle?: Maybe<Scalars['String']>;
  reasonText?: Maybe<Scalars['String']>;
};

export type EnglishResolutions = {
  __typename?: 'EnglishResolutions';
  resolutionTitle?: Maybe<Scalars['String']>;
  resolutionText?: Maybe<Scalars['JSON']>;
};

export type EnglishProcessSteps = {
  __typename?: 'EnglishProcessSteps';
  processStepText?: Maybe<Scalars['String']>;
};

export type EnglishReviews = {
  __typename?: 'EnglishReviews';
  reviewName?: Maybe<Scalars['String']>;
  reviewText?: Maybe<Scalars['JSON']>;
};

export type EnglishFaq = {
  __typename?: 'EnglishFaq';
  faqTitle?: Maybe<Scalars['String']>;
  faqText?: Maybe<Scalars['JSON']>;
};

export type English = Node & Document & {
  __typename?: 'English';
  reasonsTitle?: Maybe<Scalars['String']>;
  reasons?: Maybe<Array<Maybe<EnglishReasons>>>;
  methodTitle?: Maybe<Scalars['String']>;
  methodText?: Maybe<Scalars['JSON']>;
  resolutionTitle?: Maybe<Scalars['String']>;
  resolutions?: Maybe<Array<Maybe<EnglishResolutions>>>;
  processTitle?: Maybe<Scalars['String']>;
  processSteps?: Maybe<Array<Maybe<EnglishProcessSteps>>>;
  aboutTitle?: Maybe<Scalars['String']>;
  aboutText?: Maybe<Scalars['JSON']>;
  placeLookTitle?: Maybe<Scalars['String']>;
  reviewsTitle?: Maybe<Scalars['String']>;
  reviews?: Maybe<Array<Maybe<EnglishReviews>>>;
  faqTitle?: Maybe<Scalars['String']>;
  faq?: Maybe<Array<Maybe<EnglishFaq>>>;
  videosTitle?: Maybe<Scalars['String']>;
  contactTitle?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type EnglishReasonsFilter = {
  reasonTitle?: InputMaybe<StringFilter>;
  reasonText?: InputMaybe<StringFilter>;
};

export type EnglishResolutionsFilter = {
  resolutionTitle?: InputMaybe<StringFilter>;
  resolutionText?: InputMaybe<RichTextFilter>;
};

export type EnglishProcessStepsFilter = {
  processStepText?: InputMaybe<StringFilter>;
};

export type EnglishReviewsFilter = {
  reviewName?: InputMaybe<StringFilter>;
  reviewText?: InputMaybe<RichTextFilter>;
};

export type EnglishFaqFilter = {
  faqTitle?: InputMaybe<StringFilter>;
  faqText?: InputMaybe<RichTextFilter>;
};

export type EnglishFilter = {
  reasonsTitle?: InputMaybe<StringFilter>;
  reasons?: InputMaybe<EnglishReasonsFilter>;
  methodTitle?: InputMaybe<StringFilter>;
  methodText?: InputMaybe<RichTextFilter>;
  resolutionTitle?: InputMaybe<StringFilter>;
  resolutions?: InputMaybe<EnglishResolutionsFilter>;
  processTitle?: InputMaybe<StringFilter>;
  processSteps?: InputMaybe<EnglishProcessStepsFilter>;
  aboutTitle?: InputMaybe<StringFilter>;
  aboutText?: InputMaybe<RichTextFilter>;
  placeLookTitle?: InputMaybe<StringFilter>;
  reviewsTitle?: InputMaybe<StringFilter>;
  reviews?: InputMaybe<EnglishReviewsFilter>;
  faqTitle?: InputMaybe<StringFilter>;
  faq?: InputMaybe<EnglishFaqFilter>;
  videosTitle?: InputMaybe<StringFilter>;
  contactTitle?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  price?: InputMaybe<StringFilter>;
};

export type EnglishConnectionEdges = {
  __typename?: 'EnglishConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<English>;
};

export type EnglishConnection = Connection & {
  __typename?: 'EnglishConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<EnglishConnectionEdges>>>;
};

export type ImagesIntroImages = {
  __typename?: 'ImagesIntroImages';
  introImage?: Maybe<Scalars['String']>;
};

export type Images = Node & Document & {
  __typename?: 'Images';
  introImages?: Maybe<Array<Maybe<ImagesIntroImages>>>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ImagesIntroImagesFilter = {
  introImage?: InputMaybe<ImageFilter>;
};

export type ImagesFilter = {
  introImages?: InputMaybe<ImagesIntroImagesFilter>;
};

export type ImagesConnectionEdges = {
  __typename?: 'ImagesConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Images>;
};

export type ImagesConnection = Connection & {
  __typename?: 'ImagesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ImagesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateCzech: Czech;
  createCzech: Czech;
  updateEnglish: English;
  createEnglish: English;
  updateImages: Images;
  createImages: Images;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateCzechArgs = {
  relativePath: Scalars['String'];
  params: CzechMutation;
};


export type MutationCreateCzechArgs = {
  relativePath: Scalars['String'];
  params: CzechMutation;
};


export type MutationUpdateEnglishArgs = {
  relativePath: Scalars['String'];
  params: EnglishMutation;
};


export type MutationCreateEnglishArgs = {
  relativePath: Scalars['String'];
  params: EnglishMutation;
};


export type MutationUpdateImagesArgs = {
  relativePath: Scalars['String'];
  params: ImagesMutation;
};


export type MutationCreateImagesArgs = {
  relativePath: Scalars['String'];
  params: ImagesMutation;
};

export type DocumentMutation = {
  czech?: InputMaybe<CzechMutation>;
  english?: InputMaybe<EnglishMutation>;
  images?: InputMaybe<ImagesMutation>;
};

export type CzechReasonsMutation = {
  reasonTitle?: InputMaybe<Scalars['String']>;
  reasonText?: InputMaybe<Scalars['String']>;
};

export type CzechResolutionsMutation = {
  resolutionTitle?: InputMaybe<Scalars['String']>;
  resolutionText?: InputMaybe<Scalars['JSON']>;
};

export type CzechProcessStepsMutation = {
  processStepText?: InputMaybe<Scalars['String']>;
};

export type CzechReviewsMutation = {
  reviewName?: InputMaybe<Scalars['String']>;
  reviewText?: InputMaybe<Scalars['JSON']>;
};

export type CzechFaqMutation = {
  faqTitle?: InputMaybe<Scalars['String']>;
  faqText?: InputMaybe<Scalars['JSON']>;
};

export type CzechMutation = {
  reasonsTitle?: InputMaybe<Scalars['String']>;
  reasons?: InputMaybe<Array<InputMaybe<CzechReasonsMutation>>>;
  methodTitle?: InputMaybe<Scalars['String']>;
  methodText?: InputMaybe<Scalars['JSON']>;
  resolutionTitle?: InputMaybe<Scalars['String']>;
  resolutions?: InputMaybe<Array<InputMaybe<CzechResolutionsMutation>>>;
  processTitle?: InputMaybe<Scalars['String']>;
  processSteps?: InputMaybe<Array<InputMaybe<CzechProcessStepsMutation>>>;
  aboutTitle?: InputMaybe<Scalars['String']>;
  aboutText?: InputMaybe<Scalars['JSON']>;
  placeLookTitle?: InputMaybe<Scalars['String']>;
  reviewsTitle?: InputMaybe<Scalars['String']>;
  reviews?: InputMaybe<Array<InputMaybe<CzechReviewsMutation>>>;
  faqTitle?: InputMaybe<Scalars['String']>;
  faq?: InputMaybe<Array<InputMaybe<CzechFaqMutation>>>;
  videosTitle?: InputMaybe<Scalars['String']>;
  contactTitle?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
};

export type EnglishReasonsMutation = {
  reasonTitle?: InputMaybe<Scalars['String']>;
  reasonText?: InputMaybe<Scalars['String']>;
};

export type EnglishResolutionsMutation = {
  resolutionTitle?: InputMaybe<Scalars['String']>;
  resolutionText?: InputMaybe<Scalars['JSON']>;
};

export type EnglishProcessStepsMutation = {
  processStepText?: InputMaybe<Scalars['String']>;
};

export type EnglishReviewsMutation = {
  reviewName?: InputMaybe<Scalars['String']>;
  reviewText?: InputMaybe<Scalars['JSON']>;
};

export type EnglishFaqMutation = {
  faqTitle?: InputMaybe<Scalars['String']>;
  faqText?: InputMaybe<Scalars['JSON']>;
};

export type EnglishMutation = {
  reasonsTitle?: InputMaybe<Scalars['String']>;
  reasons?: InputMaybe<Array<InputMaybe<EnglishReasonsMutation>>>;
  methodTitle?: InputMaybe<Scalars['String']>;
  methodText?: InputMaybe<Scalars['JSON']>;
  resolutionTitle?: InputMaybe<Scalars['String']>;
  resolutions?: InputMaybe<Array<InputMaybe<EnglishResolutionsMutation>>>;
  processTitle?: InputMaybe<Scalars['String']>;
  processSteps?: InputMaybe<Array<InputMaybe<EnglishProcessStepsMutation>>>;
  aboutTitle?: InputMaybe<Scalars['String']>;
  aboutText?: InputMaybe<Scalars['JSON']>;
  placeLookTitle?: InputMaybe<Scalars['String']>;
  reviewsTitle?: InputMaybe<Scalars['String']>;
  reviews?: InputMaybe<Array<InputMaybe<EnglishReviewsMutation>>>;
  faqTitle?: InputMaybe<Scalars['String']>;
  faq?: InputMaybe<Array<InputMaybe<EnglishFaqMutation>>>;
  videosTitle?: InputMaybe<Scalars['String']>;
  contactTitle?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
};

export type ImagesIntroImagesMutation = {
  introImage?: InputMaybe<Scalars['String']>;
};

export type ImagesMutation = {
  introImages?: InputMaybe<Array<InputMaybe<ImagesIntroImagesMutation>>>;
};

export type CzechPartsFragment = { __typename?: 'Czech', reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, placeLookTitle?: string | null | undefined, reviewsTitle?: string | null | undefined, faqTitle?: string | null | undefined, videosTitle?: string | null | undefined, contactTitle?: string | null | undefined, email?: string | null | undefined, phone?: string | null | undefined, price?: string | null | undefined, reasons?: Array<{ __typename: 'CzechReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'CzechResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'CzechProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'CzechReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined, faq?: Array<{ __typename: 'CzechFaq', faqTitle?: string | null | undefined, faqText?: any | null | undefined } | null | undefined> | null | undefined };

export type EnglishPartsFragment = { __typename?: 'English', reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, placeLookTitle?: string | null | undefined, reviewsTitle?: string | null | undefined, faqTitle?: string | null | undefined, videosTitle?: string | null | undefined, contactTitle?: string | null | undefined, email?: string | null | undefined, phone?: string | null | undefined, price?: string | null | undefined, reasons?: Array<{ __typename: 'EnglishReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'EnglishResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'EnglishProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'EnglishReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined, faq?: Array<{ __typename: 'EnglishFaq', faqTitle?: string | null | undefined, faqText?: any | null | undefined } | null | undefined> | null | undefined };

export type ImagesPartsFragment = { __typename?: 'Images', introImages?: Array<{ __typename: 'ImagesIntroImages', introImage?: string | null | undefined } | null | undefined> | null | undefined };

export type CzechQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type CzechQuery = { __typename?: 'Query', czech: { __typename?: 'Czech', id: string, reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, placeLookTitle?: string | null | undefined, reviewsTitle?: string | null | undefined, faqTitle?: string | null | undefined, videosTitle?: string | null | undefined, contactTitle?: string | null | undefined, email?: string | null | undefined, phone?: string | null | undefined, price?: string | null | undefined, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, reasons?: Array<{ __typename: 'CzechReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'CzechResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'CzechProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'CzechReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined, faq?: Array<{ __typename: 'CzechFaq', faqTitle?: string | null | undefined, faqText?: any | null | undefined } | null | undefined> | null | undefined } };

export type CzechConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<CzechFilter>;
}>;


export type CzechConnectionQuery = { __typename?: 'Query', czechConnection: { __typename?: 'CzechConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CzechConnectionEdges', node?: { __typename?: 'Czech', id: string, reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, placeLookTitle?: string | null | undefined, reviewsTitle?: string | null | undefined, faqTitle?: string | null | undefined, videosTitle?: string | null | undefined, contactTitle?: string | null | undefined, email?: string | null | undefined, phone?: string | null | undefined, price?: string | null | undefined, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, reasons?: Array<{ __typename: 'CzechReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'CzechResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'CzechProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'CzechReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined, faq?: Array<{ __typename: 'CzechFaq', faqTitle?: string | null | undefined, faqText?: any | null | undefined } | null | undefined> | null | undefined } | null | undefined } | null | undefined> | null | undefined } };

export type EnglishQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type EnglishQuery = { __typename?: 'Query', english: { __typename?: 'English', id: string, reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, placeLookTitle?: string | null | undefined, reviewsTitle?: string | null | undefined, faqTitle?: string | null | undefined, videosTitle?: string | null | undefined, contactTitle?: string | null | undefined, email?: string | null | undefined, phone?: string | null | undefined, price?: string | null | undefined, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, reasons?: Array<{ __typename: 'EnglishReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'EnglishResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'EnglishProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'EnglishReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined, faq?: Array<{ __typename: 'EnglishFaq', faqTitle?: string | null | undefined, faqText?: any | null | undefined } | null | undefined> | null | undefined } };

export type EnglishConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<EnglishFilter>;
}>;


export type EnglishConnectionQuery = { __typename?: 'Query', englishConnection: { __typename?: 'EnglishConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'EnglishConnectionEdges', node?: { __typename?: 'English', id: string, reasonsTitle?: string | null | undefined, methodTitle?: string | null | undefined, methodText?: any | null | undefined, resolutionTitle?: string | null | undefined, processTitle?: string | null | undefined, aboutTitle?: string | null | undefined, aboutText?: any | null | undefined, placeLookTitle?: string | null | undefined, reviewsTitle?: string | null | undefined, faqTitle?: string | null | undefined, videosTitle?: string | null | undefined, contactTitle?: string | null | undefined, email?: string | null | undefined, phone?: string | null | undefined, price?: string | null | undefined, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, reasons?: Array<{ __typename: 'EnglishReasons', reasonTitle?: string | null | undefined, reasonText?: string | null | undefined } | null | undefined> | null | undefined, resolutions?: Array<{ __typename: 'EnglishResolutions', resolutionTitle?: string | null | undefined, resolutionText?: any | null | undefined } | null | undefined> | null | undefined, processSteps?: Array<{ __typename: 'EnglishProcessSteps', processStepText?: string | null | undefined } | null | undefined> | null | undefined, reviews?: Array<{ __typename: 'EnglishReviews', reviewName?: string | null | undefined, reviewText?: any | null | undefined } | null | undefined> | null | undefined, faq?: Array<{ __typename: 'EnglishFaq', faqTitle?: string | null | undefined, faqText?: any | null | undefined } | null | undefined> | null | undefined } | null | undefined } | null | undefined> | null | undefined } };

export type ImagesQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ImagesQuery = { __typename?: 'Query', images: { __typename?: 'Images', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, introImages?: Array<{ __typename: 'ImagesIntroImages', introImage?: string | null | undefined } | null | undefined> | null | undefined } };

export type ImagesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ImagesFilter>;
}>;


export type ImagesConnectionQuery = { __typename?: 'Query', imagesConnection: { __typename?: 'ImagesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ImagesConnectionEdges', node?: { __typename?: 'Images', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, introImages?: Array<{ __typename: 'ImagesIntroImages', introImage?: string | null | undefined } | null | undefined> | null | undefined } | null | undefined } | null | undefined> | null | undefined } };

export const CzechPartsFragmentDoc = gql`
    fragment CzechParts on Czech {
  reasonsTitle
  reasons {
    __typename
    reasonTitle
    reasonText
  }
  methodTitle
  methodText
  resolutionTitle
  resolutions {
    __typename
    resolutionTitle
    resolutionText
  }
  processTitle
  processSteps {
    __typename
    processStepText
  }
  aboutTitle
  aboutText
  placeLookTitle
  reviewsTitle
  reviews {
    __typename
    reviewName
    reviewText
  }
  faqTitle
  faq {
    __typename
    faqTitle
    faqText
  }
  videosTitle
  contactTitle
  email
  phone
  price
}
    `;
export const EnglishPartsFragmentDoc = gql`
    fragment EnglishParts on English {
  reasonsTitle
  reasons {
    __typename
    reasonTitle
    reasonText
  }
  methodTitle
  methodText
  resolutionTitle
  resolutions {
    __typename
    resolutionTitle
    resolutionText
  }
  processTitle
  processSteps {
    __typename
    processStepText
  }
  aboutTitle
  aboutText
  placeLookTitle
  reviewsTitle
  reviews {
    __typename
    reviewName
    reviewText
  }
  faqTitle
  faq {
    __typename
    faqTitle
    faqText
  }
  videosTitle
  contactTitle
  email
  phone
  price
}
    `;
export const ImagesPartsFragmentDoc = gql`
    fragment ImagesParts on Images {
  introImages {
    __typename
    introImage
  }
}
    `;
export const CzechDocument = gql`
    query czech($relativePath: String!) {
  czech(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CzechParts
  }
}
    ${CzechPartsFragmentDoc}`;
export const CzechConnectionDocument = gql`
    query czechConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CzechFilter) {
  czechConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CzechParts
      }
    }
  }
}
    ${CzechPartsFragmentDoc}`;
export const EnglishDocument = gql`
    query english($relativePath: String!) {
  english(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...EnglishParts
  }
}
    ${EnglishPartsFragmentDoc}`;
export const EnglishConnectionDocument = gql`
    query englishConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: EnglishFilter) {
  englishConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...EnglishParts
      }
    }
  }
}
    ${EnglishPartsFragmentDoc}`;
export const ImagesDocument = gql`
    query images($relativePath: String!) {
  images(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ImagesParts
  }
}
    ${ImagesPartsFragmentDoc}`;
export const ImagesConnectionDocument = gql`
    query imagesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ImagesFilter) {
  imagesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ImagesParts
      }
    }
  }
}
    ${ImagesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      czech(variables: CzechQueryVariables, options?: C): Promise<{data: CzechQuery, variables: CzechQueryVariables, query: string}> {
        return requester<{data: CzechQuery, variables: CzechQueryVariables, query: string}, CzechQueryVariables>(CzechDocument, variables, options);
      },
    czechConnection(variables?: CzechConnectionQueryVariables, options?: C): Promise<{data: CzechConnectionQuery, variables: CzechConnectionQueryVariables, query: string}> {
        return requester<{data: CzechConnectionQuery, variables: CzechConnectionQueryVariables, query: string}, CzechConnectionQueryVariables>(CzechConnectionDocument, variables, options);
      },
    english(variables: EnglishQueryVariables, options?: C): Promise<{data: EnglishQuery, variables: EnglishQueryVariables, query: string}> {
        return requester<{data: EnglishQuery, variables: EnglishQueryVariables, query: string}, EnglishQueryVariables>(EnglishDocument, variables, options);
      },
    englishConnection(variables?: EnglishConnectionQueryVariables, options?: C): Promise<{data: EnglishConnectionQuery, variables: EnglishConnectionQueryVariables, query: string}> {
        return requester<{data: EnglishConnectionQuery, variables: EnglishConnectionQueryVariables, query: string}, EnglishConnectionQueryVariables>(EnglishConnectionDocument, variables, options);
      },
    images(variables: ImagesQueryVariables, options?: C): Promise<{data: ImagesQuery, variables: ImagesQueryVariables, query: string}> {
        return requester<{data: ImagesQuery, variables: ImagesQueryVariables, query: string}, ImagesQueryVariables>(ImagesDocument, variables, options);
      },
    imagesConnection(variables?: ImagesConnectionQueryVariables, options?: C): Promise<{data: ImagesConnectionQuery, variables: ImagesConnectionQueryVariables, query: string}> {
        return requester<{data: ImagesConnectionQuery, variables: ImagesConnectionQueryVariables, query: string}, ImagesConnectionQueryVariables>(ImagesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  