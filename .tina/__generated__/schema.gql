# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  czech(relativePath: String): Czech!
  czechConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CzechFilter): CzechConnection!
  english(relativePath: String): English!
  englishConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: EnglishFilter): EnglishConnection!
  images(relativePath: String): Images!
  imagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ImagesFilter): ImagesConnection!
}

input DocumentFilter {
  czech: CzechFilter
  english: EnglishFilter
  images: ImagesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Czech | English | Images

type CzechReasons {
  reasonTitle: String
  reasonText: String
}

type CzechResolutions {
  resolutionTitle: String
  resolutionText: JSON
}

type CzechProcessSteps {
  processStepText: String
}

type CzechReviews {
  reviewName: String
  reviewText: JSON
}

type CzechFaq {
  faqTitle: String
  faqText: JSON
}

type Czech implements Node & Document {
  reasonsTitle: String
  reasons: [CzechReasons]
  methodTitle: String
  methodText: JSON
  resolutionTitle: String
  resolutions: [CzechResolutions]
  processTitle: String
  processSteps: [CzechProcessSteps]
  aboutTitle: String
  aboutText: JSON
  placeLookTitle: String
  reviewsTitle: String
  reviews: [CzechReviews]
  faqTitle: String
  faq: [CzechFaq]
  videosTitle: String
  contactTitle: String
  email: String
  phone: String
  price: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input CzechReasonsFilter {
  reasonTitle: StringFilter
  reasonText: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input CzechResolutionsFilter {
  resolutionTitle: StringFilter
  resolutionText: RichTextFilter
}

input CzechProcessStepsFilter {
  processStepText: StringFilter
}

input CzechReviewsFilter {
  reviewName: StringFilter
  reviewText: RichTextFilter
}

input CzechFaqFilter {
  faqTitle: StringFilter
  faqText: RichTextFilter
}

input CzechFilter {
  reasonsTitle: StringFilter
  reasons: CzechReasonsFilter
  methodTitle: StringFilter
  methodText: RichTextFilter
  resolutionTitle: StringFilter
  resolutions: CzechResolutionsFilter
  processTitle: StringFilter
  processSteps: CzechProcessStepsFilter
  aboutTitle: StringFilter
  aboutText: RichTextFilter
  placeLookTitle: StringFilter
  reviewsTitle: StringFilter
  reviews: CzechReviewsFilter
  faqTitle: StringFilter
  faq: CzechFaqFilter
  videosTitle: StringFilter
  contactTitle: StringFilter
  email: StringFilter
  phone: StringFilter
  price: StringFilter
}

type CzechConnectionEdges {
  cursor: String!
  node: Czech
}

type CzechConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CzechConnectionEdges]
}

type EnglishReasons {
  reasonTitle: String
  reasonText: String
}

type EnglishResolutions {
  resolutionTitle: String
  resolutionText: JSON
}

type EnglishProcessSteps {
  processStepText: String
}

type EnglishReviews {
  reviewName: String
  reviewText: JSON
}

type EnglishFaq {
  faqTitle: String
  faqText: JSON
}

type English implements Node & Document {
  reasonsTitle: String
  reasons: [EnglishReasons]
  methodTitle: String
  methodText: JSON
  resolutionTitle: String
  resolutions: [EnglishResolutions]
  processTitle: String
  processSteps: [EnglishProcessSteps]
  aboutTitle: String
  aboutText: JSON
  placeLookTitle: String
  reviewsTitle: String
  reviews: [EnglishReviews]
  faqTitle: String
  faq: [EnglishFaq]
  videosTitle: String
  contactTitle: String
  email: String
  phone: String
  price: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input EnglishReasonsFilter {
  reasonTitle: StringFilter
  reasonText: StringFilter
}

input EnglishResolutionsFilter {
  resolutionTitle: StringFilter
  resolutionText: RichTextFilter
}

input EnglishProcessStepsFilter {
  processStepText: StringFilter
}

input EnglishReviewsFilter {
  reviewName: StringFilter
  reviewText: RichTextFilter
}

input EnglishFaqFilter {
  faqTitle: StringFilter
  faqText: RichTextFilter
}

input EnglishFilter {
  reasonsTitle: StringFilter
  reasons: EnglishReasonsFilter
  methodTitle: StringFilter
  methodText: RichTextFilter
  resolutionTitle: StringFilter
  resolutions: EnglishResolutionsFilter
  processTitle: StringFilter
  processSteps: EnglishProcessStepsFilter
  aboutTitle: StringFilter
  aboutText: RichTextFilter
  placeLookTitle: StringFilter
  reviewsTitle: StringFilter
  reviews: EnglishReviewsFilter
  faqTitle: StringFilter
  faq: EnglishFaqFilter
  videosTitle: StringFilter
  contactTitle: StringFilter
  email: StringFilter
  phone: StringFilter
  price: StringFilter
}

type EnglishConnectionEdges {
  cursor: String!
  node: English
}

type EnglishConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [EnglishConnectionEdges]
}

type Images implements Node & Document {
  firstIntroImage: String
  secondIntroImage: String
  thirdIntroImage: String
  fourthIntroImage: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImagesFilter {
  firstIntroImage: ImageFilter
  secondIntroImage: ImageFilter
  thirdIntroImage: ImageFilter
  fourthIntroImage: ImageFilter
}

type ImagesConnectionEdges {
  cursor: String!
  node: Images
}

type ImagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ImagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateCzech(relativePath: String!, params: CzechMutation!): Czech!
  createCzech(relativePath: String!, params: CzechMutation!): Czech!
  updateEnglish(relativePath: String!, params: EnglishMutation!): English!
  createEnglish(relativePath: String!, params: EnglishMutation!): English!
  updateImages(relativePath: String!, params: ImagesMutation!): Images!
  createImages(relativePath: String!, params: ImagesMutation!): Images!
}

input DocumentMutation {
  czech: CzechMutation
  english: EnglishMutation
  images: ImagesMutation
}

input CzechReasonsMutation {
  reasonTitle: String
  reasonText: String
}

input CzechResolutionsMutation {
  resolutionTitle: String
  resolutionText: JSON
}

input CzechProcessStepsMutation {
  processStepText: String
}

input CzechReviewsMutation {
  reviewName: String
  reviewText: JSON
}

input CzechFaqMutation {
  faqTitle: String
  faqText: JSON
}

input CzechMutation {
  reasonsTitle: String
  reasons: [CzechReasonsMutation]
  methodTitle: String
  methodText: JSON
  resolutionTitle: String
  resolutions: [CzechResolutionsMutation]
  processTitle: String
  processSteps: [CzechProcessStepsMutation]
  aboutTitle: String
  aboutText: JSON
  placeLookTitle: String
  reviewsTitle: String
  reviews: [CzechReviewsMutation]
  faqTitle: String
  faq: [CzechFaqMutation]
  videosTitle: String
  contactTitle: String
  email: String
  phone: String
  price: String
}

input EnglishReasonsMutation {
  reasonTitle: String
  reasonText: String
}

input EnglishResolutionsMutation {
  resolutionTitle: String
  resolutionText: JSON
}

input EnglishProcessStepsMutation {
  processStepText: String
}

input EnglishReviewsMutation {
  reviewName: String
  reviewText: JSON
}

input EnglishFaqMutation {
  faqTitle: String
  faqText: JSON
}

input EnglishMutation {
  reasonsTitle: String
  reasons: [EnglishReasonsMutation]
  methodTitle: String
  methodText: JSON
  resolutionTitle: String
  resolutions: [EnglishResolutionsMutation]
  processTitle: String
  processSteps: [EnglishProcessStepsMutation]
  aboutTitle: String
  aboutText: JSON
  placeLookTitle: String
  reviewsTitle: String
  reviews: [EnglishReviewsMutation]
  faqTitle: String
  faq: [EnglishFaqMutation]
  videosTitle: String
  contactTitle: String
  email: String
  phone: String
  price: String
}

input ImagesMutation {
  firstIntroImage: String
  secondIntroImage: String
  thirdIntroImage: String
  fourthIntroImage: String
}

schema {
  query: Query
  mutation: Mutation
}
  