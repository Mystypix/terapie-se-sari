# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Page

type PageReasons {
  reasonTitle: String
  reasonText: String
}

type PageResolutions {
  resolutionTitle: String
  resolutionText: JSON
}

type PageProcessSteps {
  processStepText: String
}

type PageReviews {
  reviewName: String
  reviewText: JSON
}

type Page implements Node & Document {
  reasonsTitle: String
  reasons: [PageReasons]
  methodTitle: String
  methodText: JSON
  resolutionTitle: String
  resolutions: [PageResolutions]
  processTitle: String
  processSteps: [PageProcessSteps]
  aboutTitle: String
  aboutText: JSON
  reviewsTitle: String
  reviews: [PageReviews]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageReasonsFilter {
  reasonTitle: StringFilter
  reasonText: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageResolutionsFilter {
  resolutionTitle: StringFilter
  resolutionText: RichTextFilter
}

input PageProcessStepsFilter {
  processStepText: StringFilter
}

input PageReviewsFilter {
  reviewName: StringFilter
  reviewText: RichTextFilter
}

input PageFilter {
  reasonsTitle: StringFilter
  reasons: PageReasonsFilter
  methodTitle: StringFilter
  methodText: RichTextFilter
  resolutionTitle: StringFilter
  resolutions: PageResolutionsFilter
  processTitle: StringFilter
  processSteps: PageProcessStepsFilter
  aboutTitle: StringFilter
  aboutText: RichTextFilter
  reviewsTitle: StringFilter
  reviews: PageReviewsFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentMutation {
  page: PageMutation
}

input PageReasonsMutation {
  reasonTitle: String
  reasonText: String
}

input PageResolutionsMutation {
  resolutionTitle: String
  resolutionText: JSON
}

input PageProcessStepsMutation {
  processStepText: String
}

input PageReviewsMutation {
  reviewName: String
  reviewText: JSON
}

input PageMutation {
  reasonsTitle: String
  reasons: [PageReasonsMutation]
  methodTitle: String
  methodText: JSON
  resolutionTitle: String
  resolutions: [PageResolutionsMutation]
  processTitle: String
  processSteps: [PageProcessStepsMutation]
  aboutTitle: String
  aboutText: JSON
  reviewsTitle: String
  reviews: [PageReviewsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  